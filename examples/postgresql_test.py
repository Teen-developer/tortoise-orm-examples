"""
    –ü—Ä–∏–º–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL –±–∞–∑–æ–π.

    –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–±–Ω–æ–≤–∏—Ç–µ 3 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ.
    –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —É—Å—Ç–∞–Ω–æ–≤–∫—É requirements.txt —Ñ–∞–π–ª–∞!
"""

POSTGRES_PASSWORD = "AndrewWasHere"
POSTGRES_IP = "127.0.0.1"
POSTGRES_PORT = 5432

import asyncio
import asyncpg
from tortoise import Tortoise
from tortoise.connection import connections
from models.common import User

loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)


async def test():
    print("–ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    user = await User.create(age=15)
    assert await User.exists(pk=user.id)
    print("–ü–æ–ª—É—á–∏–ª–æ—Å—å! –ë–∞–∑–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!")
    await user.delete()


async def main():
    connectionString = (
        f"asyncpg://postgres:{POSTGRES_PASSWORD}@"
        f"{POSTGRES_IP}:{POSTGRES_PORT}/postgres"
    )

    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:")
    print(connectionString)

    await Tortoise.init(
        db_url=connectionString,
        modules={"app": ["models.common"]}
    )
    await Tortoise.generate_schemas(safe=True)
    await test()


try:
    loop.run_until_complete(main())
except ConnectionRefusedError:
    print("–ü–æ—Ä—Ç –Ω–µ –≤–µ—Ä–µ–Ω")
except asyncpg.exceptions.ConnectionDoesNotExistError:
    print("–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ø–∞—Ä–æ–ª—å –≤ POSTGRES_PASSWORD –Ω–µ –≤–µ—Ä–µ–Ω –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
else:
    print("üü© –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! ü•≥")
finally:
    loop.run_until_complete(connections.close_all())
    loop.close()